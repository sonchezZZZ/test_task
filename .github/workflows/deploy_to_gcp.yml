name: Deploy Application

on:
  push:
    branches: [main]  

jobs:
  build:
    name: Build/Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Configure Docker for gcloud
        run: |
          gcloud config set project ${{ secrets.PROJECT_ID }}
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Build and Push Docker image
        id: build-image
        run: |
          IMAGE=${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
          echo "image=IMAGE" >> "$GITHUB_OUTPUT"
          docker build -t $IMAGE .
          docker push $IMAGE     

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up Google Cloud auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Deploy to Cloud Run
        run: |
            IMAGE=${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.SERVICE_NAME }}:${{ github.sha }}
            SERVICE_EXISTS=$(gcloud run services describe ${{ secrets.APP_NAME }} --region ${{ secrets.REGION }} --platform managed --format="value(metadata.name)" || echo "")
            if [ -z "$SERVICE_EXISTS" ]; then
              echo "Service does not exist yet, deploying with traffic"
              gcloud run deploy ${{ secrets.APP_NAME }} \
                --image ${{needs.build.outputs.image}} \
                --region ${{ secrets.REGION }} \
                --platform managed \
                --set-env-vars VERSION=${{ github.sha }}
            else
              echo "Service exists, deploying with no traffic"
              gcloud run deploy ${{ secrets.APP_NAME }} \
                --image $IMAGE \
                --region ${{ secrets.REGION }} \
                --platform managed \
                --set-env-vars VERSION=${{ github.sha }} \
                --no-traffic
            fi


